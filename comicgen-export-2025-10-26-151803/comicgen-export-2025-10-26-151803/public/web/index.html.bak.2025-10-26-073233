<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NovelToComic | 小说转漫画生成平台</title>
    <style>
        /* 基础样式 */
        :root {
            --primary-color: #0071e3;
            --secondary-color: #1d1d1f;
            --background-color: #f5f5f7;
            --text-color: #1d1d1f;
            --light-text: #86868b;
            --white: #ffffff;
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.5;
            overflow-x: hidden;
        }

        /* 导航栏 */
        header {
            position: fixed;
            top: 0;
            width: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            z-index: 1000;
            padding: 0 22px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .nav-links {
            display: flex;
            list-style: none;
        }

        .nav-links li {
            margin: 0 15px;
        }

        .nav-links a {
            text-decoration: none;
            color: var(--text-color);
            font-size: 12px;
            font-weight: 400;
            transition: var(--transition);
        }

        .nav-links a:hover {
            color: var(--primary-color);
        }

        .logo {
            font-weight: 600;
            font-size: 21px;
            color: var(--text-color);
        }

        /* Hero 区域 */
        .hero {
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 0 22px;
            background: linear-gradient(135deg, #f5f5f7 0%, #e8e8ed 100%);
        }

        .hero h1 {
            font-size: 80px;
            font-weight: 700;
            letter-spacing: -0.015em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #1d1d1f, #424245);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .hero p {
            font-size: 28px;
            color: var(--light-text);
            max-width: 700px;
            margin-bottom: 40px;
        }

        .cta-button {
            display: inline-block;
            background-color: var(--primary-color);
            color: white;
            padding: 12px 24px;
            border-radius: 980px;
            text-decoration: none;
            font-size: 17px;
            font-weight: 500;
            transition: var(--transition);
        }

        .cta-button:hover {
            background-color: #0077ED;
            transform: scale(1.02);
        }

        /* 功能展示区域 */
        .features {
            padding: 120px 22px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .section-title {
            font-size: 56px;
            font-weight: 700;
            text-align: center;
            margin-bottom: 80px;
            letter-spacing: -0.015em;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 40px;
        }

        .feature-card {
            background-color: var(--white);
            border-radius: 18px;
            padding: 40px 30px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            transition: var(--transition);
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .feature-icon {
            font-size: 48px;
            margin-bottom: 20px;
        }

        .feature-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .feature-description {
            font-size: 17px;
            color: var(--light-text);
        }

        /* 生成器区域 */
        .generator {
            padding: 120px 22px;
            background-color: var(--white);
        }

        .generator-container {
            max-width: 1000px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .input-area {
            width: 100%;
            margin-bottom: 40px;
        }

        .input-area textarea {
            width: 100%;
            height: 200px;
            padding: 20px;
            border: 1px solid #d2d2d7;
            border-radius: 12px;
            font-size: 17px;
            resize: vertical;
            transition: var(--transition);
        }

        .input-area textarea:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .style-options {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .style-option {
            padding: 10px 20px;
            border: 1px solid #d2d2d7;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
        }

        .style-option.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .generate-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 980px;
            font-size: 17px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .generate-btn:hover {
            background-color: #0077ED;
        }

        .result-area {
            width: 100%;
            margin-top: 60px;
            display: none;
        }

        .comic-panels {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .comic-panel {
            background-color: var(--background-color);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        .panel-image {
            width: 100%;
            height: 200px;
            background-color: #e8e8ed;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--light-text);
        }

        .panel-text {
            padding: 15px;
            font-size: 14px;
        }

        /* 用户故事区域 */
        .user-stories {
            padding: 120px 22px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .story-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 60px;
        }

        .story-card {
            background-color: var(--white);
            border-radius: 18px;
            padding: 40px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        .story-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .story-content {
            font-size: 17px;
            color: var(--light-text);
        }

        /* 技术亮点区域 */
        .tech-highlights {
            padding: 120px 22px;
            background-color: var(--white);
        }

        .tech-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 30px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .tech-item {
            text-align: center;
        }

        .tech-icon {
            font-size: 40px;
            margin-bottom: 20px;
        }

        .tech-title {
            font-size: 19px;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .tech-description {
            font-size: 14px;
            color: var(--light-text);
        }

        /* 页脚 */
        footer {
            padding: 40px 22px;
            background-color: var(--secondary-color);
            color: var(--white);
            text-align: center;
        }

        .footer-links {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 20px;
        }

        .footer-links a {
            color: var(--white);
            text-decoration: none;
            font-size: 12px;
        }

        .copyright {
            font-size: 12px;
            color: #86868b;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .hero h1 { font-size: 48px; }
            .hero p { font-size: 21px; }
            .feature-grid { grid-template-columns: 1fr; }
            .story-grid { grid-template-columns: 1fr; }
            .tech-grid { grid-template-columns: repeat(2, 1fr); }
        }
    </style>
</head>
<body>
    <!-- 导航栏 -->
    <header>
        <div class="logo">NovelToComic</div>
        <ul class="nav-links">
            <li><a href="#features">功能</a></li>
            <li><a href="#generator">生成器</a></li>
            <li><a href="#stories">用户故事</a></li>
            <li><a href="#tech">技术亮点</a></li>
        </ul>
    </header>

    <!-- Hero 区域 -->
    <section class="hero">
        <h1>NovelToComic</h1>
        <p>将您的小说文字，瞬间转化为精美的漫画图像</p>
        <a href="#generator" class="cta-button">开始创作</a>
    </section>

    <!-- 功能展示区域 -->
    <section class="features" id="features">
        <h2 class="section-title">强大功能</h2>
        <div class="feature-grid">
            <div class="feature-card">
                <div class="feature-icon">📖</div>
                <h3 class="feature-title">智能分镜</h3>
                <p class="feature-description">AI自动分析小说情节，生成合理的漫画分镜布局</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🎨</div>
                <h3 class="feature-title">多种风格</h3>
                <p class="feature-description">支持日漫、美漫、黑白线稿等多种漫画风格</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">👤</div>
                <h3 class="feature-title">角色一致</h3>
                <p class="feature-description">确保所有分镜中角色形象保持一致</p>
            </div>
        </div>
    </section>

    <!-- 生成器区域（保持原布局；只接入接口） -->
    <section class="generator" id="generator">
        <h2 class="section-title">漫画生成器</h2>
        <div class="generator-container">
            <div class="input-area">
                <textarea placeholder="请输入小说内容...例如：雨夜中，少年追逐光影，他的身影在湿漉漉的街道上拉得很长..."></textarea>
            </div>
            <div class="style-options">
                <div class="style-option active">日式漫画</div>
                <div class="style-option">美式漫画</div>
                <div class="style-option">黑白线稿</div>
                <div class="style-option">水彩风格</div>
            </div>
            <button class="generate-btn">生成漫画</button>
            <div class="result-area">
                <h3>生成结果</h3>
                <div class="comic-panels">
                    <div class="comic-panel">
                        <div class="panel-image">漫画图像将在这里显示</div>
                        <div class="panel-text">第一幕：雨夜中，少年追逐光影</div>
                    </div>
                    <div class="comic-panel">
                        <div class="panel-image">漫画图像将在这里显示</div>
                        <div class="panel-text">第二幕：他的身影在湿漉漉的街道上拉得很长</div>
                    </div>
                    <div class="comic-panel">
                        <div class="panel-image">漫画图像将在这里显示</div>
                        <div class="panel-text">第三幕：远处的灯光在雨中显得朦胧而神秘</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- 用户故事区域 -->
    <section class="user-stories" id="stories">
        <h2 class="section-title">用户故事</h2>
        <div class="story-grid">
            <div class="story-card">
                <h3 class="story-title">网络小说作者</h3>
                <p class="story-content">"作为网络小说作者，我经常需要为我的作品配图，但请插画师成本太高。使用NovelToComic后，我可以快速将关键情节转化为漫画分镜，大大提升了读者的阅读体验。"</p>
            </div>
            <div class="story-card">
                <h3 class="story-title">漫画爱好者</h3>
                <p class="story-content">"我一直想把自己写的小故事变成漫画，但绘画技能有限。NovelToComic让我梦想成真，只需输入文字就能生成精美的漫画，创作门槛大大降低。"</p>
            </div>
        </div>
    </section>

    <!-- 技术亮点区域 -->
    <section class="tech-highlights" id="tech">
        <h2 class="section-title">技术亮点</h2>
        <div class="tech-grid">
            <div class="tech-item">
                <div class="tech-icon">🧠</div>
                <h3 class="tech-title">先进AI模型</h3>
                <p class="tech-description">采用最新的AIGC技术，精准理解文本语义</p>
            </div>
            <div class="tech-item">
                <div class="tech-icon">⚡</div>
                <h3 class="tech-title">快速生成</h3>
                <p class="tech-description">云端处理，分钟级生成完整漫画分镜</p>
            </div>
            <div class="tech-item">
                <div class="tech-icon">🎭</div>
                <h3 class="tech-title">角色一致</h3>
                <p class="tech-description">独特算法确保角色在不同分镜中保持一致</p>
            </div>
            <div class="tech-item">
                <div class="tech-icon">🔄</div>
                <h3 class="tech-title">持续优化</h3>
                <p class="tech-description">基于用户反馈不断改进生成质量</p>
            </div>
        </div>
    </section>

    <!-- 页脚 -->
    <footer>
        <div class="footer-links">
            <a href="#">隐私政策</a>
            <a href="#">使用条款</a>
            <a href="#">技术支持</a>
            <a href="#">关于我们</a>
        </div>
        <div class="copyright">© 2023 NovelToComic. 保留所有权利。</div>
    </footer>

    <script>
        // ====== 仅接入接口：保持你原有布局不变 ======
        const API = '/api';
        let STOP = false; // 预留停止并发的开关（如需）

        // 工具函数
        const $ = sel => document.querySelector(sel);
        const esc = s => String(s??'').replace(/[&<>"]/g,m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;' }[m]));
        async function postJSON(path, body){
            const r = await fetch(API+path,{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) });
            if(!r.ok){ throw new Error(await r.text()); }
            return r.json();
        }
        function digPanels(sb){
            const list=[]; (sb.pages||[]).forEach((p)=>{ (p.panels||[]).forEach(g=> list.push({ id:g.id, desc:g.desc||'' }) ); });
            return list;
        }
        async function runPool(limit, tasks){
            let i=0;
            async function worker(){
                while(true){
                    if(STOP) break;
                    const cur=i++; if(cur>=tasks.length) break;
                    try{ await tasks[cur](); }catch(_){/*单格失败不影响其他*/ }
                }
            }
            await Promise.all(Array.from({length:Math.min(limit,tasks.length)},()=>worker()));
        }

        // 风格选择功能（保持）
        document.querySelectorAll('.style-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.style-option').forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // 生成按钮功能 —— 改为真实调用后端接口
        document.querySelector('.generate-btn').addEventListener('click', async function() {
            const textarea = document.querySelector('.input-area textarea');
            const text = textarea.value.trim();
            if (text === '') {
                alert('请输入小说内容');
                return;
            }

            // 选中的风格名称（不改你的DOM）
            const active = document.querySelector('.style-option.active');
            const styleName = (active ? active.textContent.trim() : '黑白线稿');

            // 为不同风格准备统一画风前缀（不新增UI）
            const stylePrefixMap = {
                '日式漫画': 'anime style, clean line art, soft lighting',
                '美式漫画': 'american comic style, bold inking, halftone dots',
                '黑白线稿': 'black and white manga, line art, screentone, high contrast, dramatic lighting',
                '水彩风格': 'watercolor painting, soft pastel colors'
            };
            const prefix = stylePrefixMap[styleName] || 'black and white manga, line art, screentone, high contrast, dramatic lighting';

            // 显示加载状态（保留你的按钮）
            const button = this;
            const originalText = button.textContent;
            button.textContent = '生成中...';
            button.disabled = true;
            STOP = false;

            try{
                // 1) 调分镜
                const sbRes = await postJSON('/storyboard', { text, style: styleName });
                const sb = JSON.parse(sbRes.storyboard_json || '{}');
                const panels = digPanels(sb);
                if(!panels.length){
                    alert('分镜为空，请尝试更详细的文本');
                    return;
                }

                // 2) 展示容器（保持你的结构）
                const resultArea = document.querySelector('.result-area');
                const panelsWrap = document.querySelector('.comic-panels');
                resultArea.style.display = 'block';
                panelsWrap.innerHTML = '';

                // 先渲染占位
                panels.forEach((p,idx)=>{
                    const cell = document.createElement('div');
                    cell.className = 'comic-panel';
                    cell.innerHTML = `
                        <div class="panel-image" id="panel-img-${idx}">生成中...</div>
                        <div class="panel-text">${esc(p?.id ?? (idx+1))}：${esc(p.desc)}</div>
                    `;
                    panelsWrap.appendChild(cell);
                });

                // 3) 前端并发逐格生成图片（不改你的布局）
                const size = '1024x1024';       // 固定尺寸（不新增控件）
                const concurrency = 3;          // 固定并发（不新增控件）

                const tasks = panels.map((p,idx)=> async ()=>{
                    const prompt = `${prefix} ${p.desc}`.trim();
                    try{
                        const img = await postJSON('/image', { prompt, size });
                        const el = document.getElementById(`panel-img-${idx}`);
                        if(el){
                            el.innerHTML = `
                                <a href="${img.url}" target="_blank" style="display:block; font-size:12px; margin-bottom:6px">${img.url}</a>
                                <img loading="lazy" src="${img.url}" alt="panel-${idx}" style="max-width:100%;height:auto">
                            `;
                        }
                    }catch(e){
                        const el = document.getElementById(`panel-img-${idx}`);
                        if(el){ el.innerHTML = `<span style="color:#e11d48">失败：</span><span style="color:#6b7280;font-size:12px">${esc(e.message||'error')}</span>`; }
                    }
                });

                await runPool(concurrency, tasks);

                // 滚动至结果区域
                resultArea.scrollIntoView({ behavior: 'smooth' });

            }catch(err){
                alert('生成失败：' + (err.message || String(err)));
            }finally{
                button.textContent = originalText;
                button.disabled = false;
            }
        });
    </script>
</body>
</html>
